<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Onfido
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Onfido API
 *
 * The Onfido API is used to submit check requests.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Onfido\Api;

use \Onfido\ApiClient;
use \Onfido\ApiException;
use \Onfido\Configuration;
use \Onfido\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Onfido
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Onfido\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Onfido\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Onfido\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.onfido.com/v2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Onfido\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Onfido\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Onfido\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cancelReport
     *
     * This endpoint is for cancelling individual paused reports.
     *
     * @param string $check_id  (required)
     * @param string $report_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return void
     */
    public function cancelReport($check_id, $report_id)
    {
        list($response) = $this->cancelReportWithHttpInfo($check_id, $report_id);
        return $response;
    }

    /**
     * Operation cancelReportWithHttpInfo
     *
     * This endpoint is for cancelling individual paused reports.
     *
     * @param string $check_id  (required)
     * @param string $report_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelReportWithHttpInfo($check_id, $report_id)
    {
        // verify the required parameter 'check_id' is set
        if ($check_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_id when calling cancelReport');
        }
        // verify the required parameter 'report_id' is set
        if ($report_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $report_id when calling cancelReport');
        }
        // parse inputs
        $resourcePath = "/checks/{check_id}/reports/{report_id}/cancel";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                "{" . "check_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_id),
                $resourcePath
            );
        }
        // path params
        if ($report_id !== null) {
            $resourcePath = str_replace(
                "{" . "report_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($report_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/checks/{check_id}/reports/{report_id}/cancel'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation createApplicant
     *
     * Create Applicant
     *
     * @param \Onfido\Models\Applicant $data  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Applicant
     */
    public function createApplicant($data = null)
    {
        list($response) = $this->createApplicantWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation createApplicantWithHttpInfo
     *
     * Create Applicant
     *
     * @param \Onfido\Models\Applicant $data  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Applicant, HTTP status code, HTTP response headers (array of strings)
     */
    public function createApplicantWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/applicants";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Applicant',
                '/applicants'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Applicant', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Applicant', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCheck
     *
     * Create a check
     *
     * @param string $applicant_id  (required)
     * @param \Onfido\Models\CheckCreationRequest $data  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Check
     */
    public function createCheck($applicant_id, $data = null)
    {
        list($response) = $this->createCheckWithHttpInfo($applicant_id, $data);
        return $response;
    }

    /**
     * Operation createCheckWithHttpInfo
     *
     * Create a check
     *
     * @param string $applicant_id  (required)
     * @param \Onfido\Models\CheckCreationRequest $data  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Check, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCheckWithHttpInfo($applicant_id, $data = null)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling createCheck');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}/checks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Check',
                '/applicants/{applicant_id}/checks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Check', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Check', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createWebhook
     *
     * Create a webhook
     *
     * @param \Onfido\Models\Webhook $data  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Webhook
     */
    public function createWebhook($data = null)
    {
        list($response) = $this->createWebhookWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation createWebhookWithHttpInfo
     *
     * Create a webhook
     *
     * @param \Onfido\Models\Webhook $data  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Webhook, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWebhookWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/webhooks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Webhook',
                '/webhooks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Webhook', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Webhook', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation destroyApplicant
     *
     * Delete Applicant
     *
     * @param string $applicant_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return void
     */
    public function destroyApplicant($applicant_id)
    {
        list($response) = $this->destroyApplicantWithHttpInfo($applicant_id);
        return $response;
    }

    /**
     * Operation destroyApplicantWithHttpInfo
     *
     * Delete Applicant
     *
     * @param string $applicant_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function destroyApplicantWithHttpInfo($applicant_id)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling destroyApplicant');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/applicants/{applicant_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downloadDocument
     *
     * Download a documents raw data
     *
     * @param string $applicant_id  (required)
     * @param string $document_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function downloadDocument($applicant_id, $document_id)
    {
        list($response) = $this->downloadDocumentWithHttpInfo($applicant_id, $document_id);
        return $response;
    }

    /**
     * Operation downloadDocumentWithHttpInfo
     *
     * Download a documents raw data
     *
     * @param string $applicant_id  (required)
     * @param string $document_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadDocumentWithHttpInfo($applicant_id, $document_id)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling downloadDocument');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling downloadDocument');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}/documents/{document_id}/download";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['image/png', 'image/jpeg', 'applicant/pdf']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "document_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/applicants/{applicant_id}/documents/{document_id}/download'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation downloadLivePhoto
     *
     * Download live photo
     *
     * @param string $live_photo_id The live photo’s unique identifier. (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function downloadLivePhoto($live_photo_id)
    {
        list($response) = $this->downloadLivePhotoWithHttpInfo($live_photo_id);
        return $response;
    }

    /**
     * Operation downloadLivePhotoWithHttpInfo
     *
     * Download live photo
     *
     * @param string $live_photo_id The live photo’s unique identifier. (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadLivePhotoWithHttpInfo($live_photo_id)
    {
        // verify the required parameter 'live_photo_id' is set
        if ($live_photo_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $live_photo_id when calling downloadLivePhoto');
        }
        // parse inputs
        $resourcePath = "/live_photos/{live_photo_id}/download";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($live_photo_id !== null) {
            $resourcePath = str_replace(
                "{" . "live_photo_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($live_photo_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/live_photos/{live_photo_id}/download'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findAddresses
     *
     * Search for addresses by postcode
     *
     * @param string $postcode  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\GenericAddressesList
     */
    public function findAddresses($postcode)
    {
        list($response) = $this->findAddressesWithHttpInfo($postcode);
        return $response;
    }

    /**
     * Operation findAddressesWithHttpInfo
     *
     * Search for addresses by postcode
     *
     * @param string $postcode  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\GenericAddressesList, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAddressesWithHttpInfo($postcode)
    {
        // verify the required parameter 'postcode' is set
        if ($postcode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $postcode when calling findAddresses');
        }
        // parse inputs
        $resourcePath = "/addresses/pick";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = $this->apiClient->getSerializer()->toQueryValue($postcode);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\GenericAddressesList',
                '/addresses/pick'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\GenericAddressesList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\GenericAddressesList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findApplicant
     *
     * Retrieve Applicant
     *
     * @param string $applicant_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Applicant
     */
    public function findApplicant($applicant_id)
    {
        list($response) = $this->findApplicantWithHttpInfo($applicant_id);
        return $response;
    }

    /**
     * Operation findApplicantWithHttpInfo
     *
     * Retrieve Applicant
     *
     * @param string $applicant_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Applicant, HTTP status code, HTTP response headers (array of strings)
     */
    public function findApplicantWithHttpInfo($applicant_id)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling findApplicant');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Applicant',
                '/applicants/{applicant_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Applicant', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Applicant', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findCheck
     *
     * Retrieve a Check
     *
     * @param string $applicant_id  (required)
     * @param string $check_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Check
     */
    public function findCheck($applicant_id, $check_id)
    {
        list($response) = $this->findCheckWithHttpInfo($applicant_id, $check_id);
        return $response;
    }

    /**
     * Operation findCheckWithHttpInfo
     *
     * Retrieve a Check
     *
     * @param string $applicant_id  (required)
     * @param string $check_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Check, HTTP status code, HTTP response headers (array of strings)
     */
    public function findCheckWithHttpInfo($applicant_id, $check_id)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling findCheck');
        }
        // verify the required parameter 'check_id' is set
        if ($check_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_id when calling findCheck');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}/checks/{check_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                "{" . "check_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Check',
                '/applicants/{applicant_id}/checks/{check_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Check', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Check', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findDocument
     *
     * A single document can be retrieved by calling this endpoint with the document’s unique identifier.
     *
     * @param string $applicant_id  (required)
     * @param string $document_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Document
     */
    public function findDocument($applicant_id, $document_id)
    {
        list($response) = $this->findDocumentWithHttpInfo($applicant_id, $document_id);
        return $response;
    }

    /**
     * Operation findDocumentWithHttpInfo
     *
     * A single document can be retrieved by calling this endpoint with the document’s unique identifier.
     *
     * @param string $applicant_id  (required)
     * @param string $document_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function findDocumentWithHttpInfo($applicant_id, $document_id)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling findDocument');
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_id when calling findDocument');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}/documents/{document_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                "{" . "document_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($document_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Document',
                '/applicants/{applicant_id}/documents/{document_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Document', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findLivePhoto
     *
     * Retrieve live photo
     *
     * @param string $live_photo_id The live photo’s unique identifier. (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\LivePhoto
     */
    public function findLivePhoto($live_photo_id)
    {
        list($response) = $this->findLivePhotoWithHttpInfo($live_photo_id);
        return $response;
    }

    /**
     * Operation findLivePhotoWithHttpInfo
     *
     * Retrieve live photo
     *
     * @param string $live_photo_id The live photo’s unique identifier. (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\LivePhoto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findLivePhotoWithHttpInfo($live_photo_id)
    {
        // verify the required parameter 'live_photo_id' is set
        if ($live_photo_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $live_photo_id when calling findLivePhoto');
        }
        // parse inputs
        $resourcePath = "/live_photos/{live_photo_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($live_photo_id !== null) {
            $resourcePath = str_replace(
                "{" . "live_photo_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($live_photo_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\LivePhoto',
                '/live_photos/{live_photo_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\LivePhoto', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\LivePhoto', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findReport
     *
     * A single report can be retrieved using this endpoint with the corresponding unique identifier.
     *
     * @param string $check_id  (required)
     * @param string $report_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Report
     */
    public function findReport($check_id, $report_id)
    {
        list($response) = $this->findReportWithHttpInfo($check_id, $report_id);
        return $response;
    }

    /**
     * Operation findReportWithHttpInfo
     *
     * A single report can be retrieved using this endpoint with the corresponding unique identifier.
     *
     * @param string $check_id  (required)
     * @param string $report_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Report, HTTP status code, HTTP response headers (array of strings)
     */
    public function findReportWithHttpInfo($check_id, $report_id)
    {
        // verify the required parameter 'check_id' is set
        if ($check_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_id when calling findReport');
        }
        // verify the required parameter 'report_id' is set
        if ($report_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $report_id when calling findReport');
        }
        // parse inputs
        $resourcePath = "/checks/{check_id}/reports/{report_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                "{" . "check_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_id),
                $resourcePath
            );
        }
        // path params
        if ($report_id !== null) {
            $resourcePath = str_replace(
                "{" . "report_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($report_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Report',
                '/checks/{check_id}/reports/{report_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Report', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Report', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findReportTypeGroup
     *
     * Retrieve single report type group object
     *
     * @param string $report_type_group_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\ReportTypeGroup
     */
    public function findReportTypeGroup($report_type_group_id)
    {
        list($response) = $this->findReportTypeGroupWithHttpInfo($report_type_group_id);
        return $response;
    }

    /**
     * Operation findReportTypeGroupWithHttpInfo
     *
     * Retrieve single report type group object
     *
     * @param string $report_type_group_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\ReportTypeGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function findReportTypeGroupWithHttpInfo($report_type_group_id)
    {
        // verify the required parameter 'report_type_group_id' is set
        if ($report_type_group_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $report_type_group_id when calling findReportTypeGroup');
        }
        // parse inputs
        $resourcePath = "/report_type_groups/{report_type_group_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($report_type_group_id !== null) {
            $resourcePath = str_replace(
                "{" . "report_type_group_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($report_type_group_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\ReportTypeGroup',
                '/report_type_groups/{report_type_group_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\ReportTypeGroup', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\ReportTypeGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation findWebhook
     *
     * Retrieve a Webhook
     *
     * @param string $webhook_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Webhook
     */
    public function findWebhook($webhook_id)
    {
        list($response) = $this->findWebhookWithHttpInfo($webhook_id);
        return $response;
    }

    /**
     * Operation findWebhookWithHttpInfo
     *
     * Retrieve a Webhook
     *
     * @param string $webhook_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Webhook, HTTP status code, HTTP response headers (array of strings)
     */
    public function findWebhookWithHttpInfo($webhook_id)
    {
        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_id when calling findWebhook');
        }
        // parse inputs
        $resourcePath = "/webhooks/{webhook_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                "{" . "webhook_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($webhook_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Webhook',
                '/webhooks/{webhook_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Webhook', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Webhook', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listApplicants
     *
     * List Applicants
     *
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\ApplicantsList
     */
    public function listApplicants()
    {
        list($response) = $this->listApplicantsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listApplicantsWithHttpInfo
     *
     * List Applicants
     *
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\ApplicantsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listApplicantsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/applicants";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\ApplicantsList',
                '/applicants'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\ApplicantsList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\ApplicantsList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listChecks
     *
     * Retrieve Checks
     *
     * @param string $applicant_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\ChecksList
     */
    public function listChecks($applicant_id)
    {
        list($response) = $this->listChecksWithHttpInfo($applicant_id);
        return $response;
    }

    /**
     * Operation listChecksWithHttpInfo
     *
     * Retrieve Checks
     *
     * @param string $applicant_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\ChecksList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listChecksWithHttpInfo($applicant_id)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling listChecks');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}/checks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\ChecksList',
                '/applicants/{applicant_id}/checks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\ChecksList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\ChecksList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listDocuments
     *
     * List documents
     *
     * @param string $applicant_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\DocumentsList
     */
    public function listDocuments($applicant_id)
    {
        list($response) = $this->listDocumentsWithHttpInfo($applicant_id);
        return $response;
    }

    /**
     * Operation listDocumentsWithHttpInfo
     *
     * List documents
     *
     * @param string $applicant_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\DocumentsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDocumentsWithHttpInfo($applicant_id)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling listDocuments');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}/documents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\DocumentsList',
                '/applicants/{applicant_id}/documents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\DocumentsList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\DocumentsList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listLivePhotos
     *
     * List live photos
     *
     * @param string $applicant_id The id of the applicant the live photos belongs to. (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\LivePhotosList
     */
    public function listLivePhotos($applicant_id)
    {
        list($response) = $this->listLivePhotosWithHttpInfo($applicant_id);
        return $response;
    }

    /**
     * Operation listLivePhotosWithHttpInfo
     *
     * List live photos
     *
     * @param string $applicant_id The id of the applicant the live photos belongs to. (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\LivePhotosList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLivePhotosWithHttpInfo($applicant_id)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling listLivePhotos');
        }
        // parse inputs
        $resourcePath = "/live_photos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($applicant_id !== null) {
            $queryParams['applicant_id'] = $this->apiClient->getSerializer()->toQueryValue($applicant_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\LivePhotosList',
                '/live_photos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\LivePhotosList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\LivePhotosList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listReportTypeGroups
     *
     * Retrieve all report type groups
     *
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\ReportTypeGroupsList
     */
    public function listReportTypeGroups()
    {
        list($response) = $this->listReportTypeGroupsWithHttpInfo();
        return $response;
    }

    /**
     * Operation listReportTypeGroupsWithHttpInfo
     *
     * Retrieve all report type groups
     *
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\ReportTypeGroupsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listReportTypeGroupsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/report_type_groups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\ReportTypeGroupsList',
                '/report_type_groups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\ReportTypeGroupsList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\ReportTypeGroupsList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listReports
     *
     * All the reports belonging to a particular check can be listed from this endpoint.
     *
     * @param string $check_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\ReportsList
     */
    public function listReports($check_id)
    {
        list($response) = $this->listReportsWithHttpInfo($check_id);
        return $response;
    }

    /**
     * Operation listReportsWithHttpInfo
     *
     * All the reports belonging to a particular check can be listed from this endpoint.
     *
     * @param string $check_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\ReportsList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listReportsWithHttpInfo($check_id)
    {
        // verify the required parameter 'check_id' is set
        if ($check_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_id when calling listReports');
        }
        // parse inputs
        $resourcePath = "/checks/{check_id}/reports";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                "{" . "check_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\ReportsList',
                '/checks/{check_id}/reports'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\ReportsList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\ReportsList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listWebhooks
     *
     * List webhooks
     *
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\WebhooksList
     */
    public function listWebhooks()
    {
        list($response) = $this->listWebhooksWithHttpInfo();
        return $response;
    }

    /**
     * Operation listWebhooksWithHttpInfo
     *
     * List webhooks
     *
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\WebhooksList, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWebhooksWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/webhooks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\WebhooksList',
                '/webhooks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\WebhooksList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\WebhooksList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resumeCheck
     *
     * Resume a Check
     *
     * @param string $check_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return void
     */
    public function resumeCheck($check_id)
    {
        list($response) = $this->resumeCheckWithHttpInfo($check_id);
        return $response;
    }

    /**
     * Operation resumeCheckWithHttpInfo
     *
     * Resume a Check
     *
     * @param string $check_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resumeCheckWithHttpInfo($check_id)
    {
        // verify the required parameter 'check_id' is set
        if ($check_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_id when calling resumeCheck');
        }
        // parse inputs
        $resourcePath = "/checks/{check_id}/resume";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                "{" . "check_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/checks/{check_id}/resume'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation resumeReport
     *
     * This endpoint is for resuming individual paused reports.
     *
     * @param string $check_id  (required)
     * @param string $report_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return void
     */
    public function resumeReport($check_id, $report_id)
    {
        list($response) = $this->resumeReportWithHttpInfo($check_id, $report_id);
        return $response;
    }

    /**
     * Operation resumeReportWithHttpInfo
     *
     * This endpoint is for resuming individual paused reports.
     *
     * @param string $check_id  (required)
     * @param string $report_id  (required)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resumeReportWithHttpInfo($check_id, $report_id)
    {
        // verify the required parameter 'check_id' is set
        if ($check_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $check_id when calling resumeReport');
        }
        // verify the required parameter 'report_id' is set
        if ($report_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $report_id when calling resumeReport');
        }
        // parse inputs
        $resourcePath = "/checks/{check_id}/reports/{report_id}/resume";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($check_id !== null) {
            $resourcePath = str_replace(
                "{" . "check_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($check_id),
                $resourcePath
            );
        }
        // path params
        if ($report_id !== null) {
            $resourcePath = str_replace(
                "{" . "report_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($report_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/checks/{check_id}/reports/{report_id}/resume'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateApplicant
     *
     * Update Applicant
     *
     * @param string $applicant_id  (required)
     * @param \Onfido\Models\Applicant $data  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Applicant
     */
    public function updateApplicant($applicant_id, $data = null)
    {
        list($response) = $this->updateApplicantWithHttpInfo($applicant_id, $data);
        return $response;
    }

    /**
     * Operation updateApplicantWithHttpInfo
     *
     * Update Applicant
     *
     * @param string $applicant_id  (required)
     * @param \Onfido\Models\Applicant $data  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Applicant, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateApplicantWithHttpInfo($applicant_id, $data = null)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling updateApplicant');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Applicant',
                '/applicants/{applicant_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Applicant', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Applicant', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uploadDocument
     *
     * Upload a document
     *
     * @param string $applicant_id  (required)
     * @param string $type  (required)
     * @param string $side  (optional)
     * @param \SplFileObject $file  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\Document
     */
    public function uploadDocument($applicant_id, $type, $side = null, $file = null)
    {
        list($response) = $this->uploadDocumentWithHttpInfo($applicant_id, $type, $side, $file);
        return $response;
    }

    /**
     * Operation uploadDocumentWithHttpInfo
     *
     * Upload a document
     *
     * @param string $applicant_id  (required)
     * @param string $type  (required)
     * @param string $side  (optional)
     * @param \SplFileObject $file  (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadDocumentWithHttpInfo($applicant_id, $type, $side = null, $file = null)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling uploadDocument');
        }
        // verify the required parameter 'type' is set
        if ($type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling uploadDocument');
        }
        // parse inputs
        $resourcePath = "/applicants/{applicant_id}/documents";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // path params
        if ($applicant_id !== null) {
            $resourcePath = str_replace(
                "{" . "applicant_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($applicant_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($type !== null) {
            $formParams['type'] = $this->apiClient->getSerializer()->toFormValue($type);
        }
        // form params
        if ($side !== null) {
            $formParams['side'] = $this->apiClient->getSerializer()->toFormValue($side);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $fileName = $this->apiClient->getSerializer()->toFormValue($file);
                $mimeType = mime_content_type($fileName);
                $formParams['file'] = curl_file_create($fileName, $mimeType);
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\Document',
                '/applicants/{applicant_id}/documents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\Document', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation uploadLivePhoto
     *
     * Upload live photo
     *
     * @param string $applicant_id The applicant_id to associate the live photo to. (required)
     * @param \SplFileObject $file The file to be uploaded. (required)
     * @param bool $advanced_validation Validates that the live photo contains exactly one face. (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return \Onfido\Models\LivePhoto
     */
    public function uploadLivePhoto($applicant_id, $file, $advanced_validation = null)
    {
        list($response) = $this->uploadLivePhotoWithHttpInfo($applicant_id, $file, $advanced_validation);
        return $response;
    }

    /**
     * Operation uploadLivePhotoWithHttpInfo
     *
     * Upload live photo
     *
     * @param string $applicant_id The applicant_id to associate the live photo to. (required)
     * @param \SplFileObject $file The file to be uploaded. (required)
     * @param bool $advanced_validation Validates that the live photo contains exactly one face. (optional)
     * @throws \Onfido\ApiException on non-2xx response
     * @return array of \Onfido\Models\LivePhoto, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadLivePhotoWithHttpInfo($applicant_id, $file, $advanced_validation = null)
    {
        // verify the required parameter 'applicant_id' is set
        if ($applicant_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $applicant_id when calling uploadLivePhoto');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling uploadLivePhoto');
        }
        // parse inputs
        $resourcePath = "/live_photos";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($applicant_id !== null) {
            $formParams['applicant_id'] = $this->apiClient->getSerializer()->toFormValue($applicant_id);
        }
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $fileName = $this->apiClient->getSerializer()->toFormValue($file);
                $mimeType = mime_content_type($fileName);
                $formParams['file'] = curl_file_create($fileName, $mimeType);
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        // form params
        if ($advanced_validation !== null) {
            $formParams['advanced_validation'] = $this->apiClient->getSerializer()->toFormValue($advanced_validation);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Authorization');
        if (strlen($apiKey) !== 0) {
            $headerParams['Authorization'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Onfido\Models\LivePhoto',
                '/live_photos'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Onfido\Models\LivePhoto', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Onfido\Models\LivePhoto', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
